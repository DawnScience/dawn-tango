#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        WorkflowDS.py
#
# description : Python source for the WorkflowDS and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                WorkflowDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys, os, datetime, time


try:
    from py4j.java_gateway import JavaGateway
except ImportError, e:
    print "Error! Py4j must be installed in Python in order for the WorkflowDS server to work."
    print "Please see http://py4j.sourceforge.net/install.html for installation instructions."
    raise

if not "JMX_LOC" in os.environ.keys():
    strCwd = os.getcwd()
    strJmxLoc = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(strCwd)))), "dawn-workflow")
    print strJmxLoc
    os.environ["JMX_LOC"] = strJmxLoc

from WorkflowProxyThread import WorkflowProxyThread
    
#==================================================================
#   WorkflowDS Class Description:
#
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :       Workflow device server ready to accept new jobs
#   DevState.RUNNING :  A workflow job is running
#==================================================================


class WorkflowDS(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        WorkflowDS.init_device(self)
        self._strActorSelected = "No actor selected"
        self._strDataInput = ""
        self._strDataOutput = "No workflow job executed yet"
        self._strJobSuccess = "No workflow job executed yet"
        self._strJobFailure = "No workflow job executed yet"
        self._workflowProxyThread = None

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device", self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        self.set_change_event("jobSuccess", True, False)
        self.set_change_event("jobFailure", True, False)
        db = PyTango.Database()
        self._strWorkflowLocation = str(db.get_device_property(self.get_name(), "workspaceLocation")["workspaceLocation"][0])
        self._strPreferredProject = str(db.get_device_property(self.get_name(), "preferredProject")["preferredProject"][0])
        print self._strWorkflowLocation
        print self._strPreferredProject


#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        pass
        #print "In ", self.get_name(), "::always_excuted_hook()"



    def set_jobSuccess(self, _jobId):
        print "In ", self.get_name(), "::set_jobSuccess()"
        self._strJobSuccess = _jobId
        print _jobId
        self.push_change_event("jobSuccess", _jobId)
        self._strActorSelected = "No workflow running"
        self.push_change_event("actorSelected", self._strActorSelected)
        self.set_state(PyTango.DevState.ON)


    def set_jobFailure(self, _jobId):
        print "In ", self.get_name(), "::set_jobFailure()"
        self._strJobFailure = _jobId
        self.push_change_event("jobFailure", _jobId)
        self._strActorSelected = "No workflow running"
        self.push_change_event("actorSelected", self._strActorSelected)
        self.set_state(PyTango.DevState.ON)

#==================================================================
#
#    WorkflowDS read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
        pass
        #print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read JobSuccess attribute
#------------------------------------------------------------------
    def read_jobSuccess(self, attr):
        #print "In ", self.get_name(), "::read_JobSuccess()"
        
        #    Add your own code here
        
        attr_JobSuccess_read = self._strJobSuccess
        attr.set_value(attr_JobSuccess_read)


#------------------------------------------------------------------
#    Read JobFailure attribute
#------------------------------------------------------------------
    def read_jobFailure(self, attr):
        #print "In ", self.get_name(), "::read_JobFailure()"
        
        #    Add your own code here
        
        attr_JobFailure_read = self.strJobFailure
        attr.set_value(attr_JobFailure_read)


#------------------------------------------------------------------
#    Read StatisticsCollected attribute
#------------------------------------------------------------------
    def read_statisticsCollected(self, attr):
        #print "In ", self.get_name(), "::read_StatisticsCollected()"
        
        #    Add your own code here
        
        attr_StatisticsCollected_read = "Hello Tango world"
        attr.set_value(attr_StatisticsCollected_read)


#------------------------------------------------------------------
#    Read testData attribute
#------------------------------------------------------------------
    def read_testData(self, attr):
        #print "In ", self.get_name(), "::read_testData()"
        
        #    Add your own code here
        
        attr_testData_read = "Hello Tango world"
        attr.set_value(attr_testData_read)


#------------------------------------------------------------------
#    Write testData attribute
#------------------------------------------------------------------
    def write_testData(self, attr):
        print "In ", self.get_name(), "::write_testData()"
        data = []
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here


#------------------------------------------------------------------
#    Read ActorSelected attribute
#------------------------------------------------------------------
    def read_actorSelected(self, attr):
        #print "In ", self.get_name(), "::read_actorSelected()"
        
        #    Add your own code here
        
        attr_actorSelected_read = self._strActorSelected
        attr.set_value(attr_actorSelected_read)



#==================================================================
#
#    WorkflowDS command methods
#
#==================================================================

#------------------------------------------------------------------
#    startJob command:
#
#    Description: 
#    argin:  DevVarStringArray    [<Module to execute>,<XML input>]
#    argout: DevString    job id
#------------------------------------------------------------------
    def startJob(self, argin):
        print "In ", self.get_name(), "::startJob()"
        #    Add your own code here
        # Check if i preferred project
        strJobName = argin[0]
        strDataInput = argin[1]
        if not strJobName.endswith(".moml"):
            strJobName += ".moml"
        strWorkflowPath = os.path.join(self._strWorkflowLocation, self._strPreferredProject, strJobName)
        print strWorkflowPath
        if os.path.exists(strWorkflowPath):
            print "-"*80
            self.set_state(PyTango.DevState.RUNNING)        
            self._workflowProxyThread = WorkflowProxyThread(self)
            self._workflowProxyThread.setWorkspacePath(self._strWorkflowLocation)
            self.set_jobSuccess("None")
            self.set_jobFailure("None")
            self._workflowProxyThread.startJob(strWorkflowPath, strDataInput)
            strJobId = self._workflowProxyThread.getJobId()
        else:
            print "+"*80
            self.set_jobFailure(strJobId)
        return strJobId


#---- startJob command State Machine -----------------
    def is_startJob_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    abort command:
#
#    Description: 
#    argin:  DevString    job id
#    argout: DevBoolean    
#------------------------------------------------------------------
    def abort(self, argin):
        print "In ", self.get_name(), "::abort()"
        #    Add your own code here
        argout = False
        return argout


#------------------------------------------------------------------
#    getJobState command:
#
#    Description: 
#    argin:  DevString    job_id
#    argout: DevString    job state
#------------------------------------------------------------------
    def getJobState(self, argin):
        print "In ", self.get_name(), "::getJobState()"
        #    Add your own code here
        argout = "Not implemented!"
        return argout


#------------------------------------------------------------------
#    initPlugin command:
#
#    Description: 
#    argin:  DevString    plugin name
#    argout: DevString    Message
#------------------------------------------------------------------
    def initPlugin(self, argin):
        print "In ", self.get_name(), "::initPlugin()"
        #    Add your own code here
        argout = "Not implemented!"        
        return argout


#------------------------------------------------------------------
#    cleanJob command:
#
#    Description: 
#    argin:  DevString    jobId
#    argout: DevString    Message
#------------------------------------------------------------------
    def cleanJob(self, argin):
        print "In ", self.get_name(), "::cleanJob()"
        #    Add your own code here
        argout = "Not implemented!"        
        return argout


#------------------------------------------------------------------
#    collectStatistics command:
#
#    Description: 
#------------------------------------------------------------------
    def collectStatistics(self):
        print "In ", self.get_name(), "::collectStatistics()"
        #    Add your own code here


#------------------------------------------------------------------
#    getStatistics command:
#
#    Description: 
#    argout: DevString    Retrieve statistics about jobs
#------------------------------------------------------------------
    def getStatistics(self):
        print "In ", self.get_name(), "::getStatistics()"
        #    Add your own code here
        argout = "Not implemented!"        
        return argout


#------------------------------------------------------------------
#    getJobOutput command:
#
#    Description: 
#    argin:  DevString    jobId
#    argout: DevString    job output xml
#------------------------------------------------------------------
    def getJobOutput(self, argin):
        print "In ", self.get_name(), "::getJobOutput()"
        #    Add your own code here
        argout = self._strDataOutput 
        return argout


#------------------------------------------------------------------
#    getJobInput command:
#
#    Description: 
#    argin:  DevString    jobId
#    argout: DevString    job input xml
#------------------------------------------------------------------
    def getJobInput(self, argin):
        print "In ", self.get_name(), "::getJobInput()"
        #    Add your own code here
        argout = self._strDataInput
        return argout


    def setJobOutput(self, _strDataOutput):
        self._strDataOutput = _strDataOutput

#==================================================================
#
#    WorkflowDSClass class definition
#
#==================================================================
class WorkflowDSClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'workspaceLocation':
            [PyTango.DevString,
            "Absolute path to the workspace location",
            [] ],
        'preferredProject':
            [PyTango.DevString,
            "Relative path to the workflow preferred project",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'startJob':
            [[PyTango.DevVarStringArray, "[<Module to execute>,<XML input>]"],
            [PyTango.DevString, "job id"]],
        'abort':
            [[PyTango.DevString, "job id"],
            [PyTango.DevBoolean, ""]],
        'getJobState':
            [[PyTango.DevString, "job_id"],
            [PyTango.DevString, "job state"]],
        'initPlugin':
            [[PyTango.DevString, "plugin name"],
            [PyTango.DevString, "Message"]],
        'cleanJob':
            [[PyTango.DevString, "jobId"],
            [PyTango.DevString, "Message"]],
        'collectStatistics':
            [[PyTango.DevVoid, "nothing needed"],
            [PyTango.DevVoid, "Collect some statistics about jobs"]],
        'getStatistics':
            [[PyTango.DevVoid, "nothing needed"],
            [PyTango.DevString, "Retrieve statistics about jobs"]],
        'getJobOutput':
            [[PyTango.DevString, "jobId"],
            [PyTango.DevString, "job output xml"]],
        'getJobInput':
            [[PyTango.DevString, "jobId"],
            [PyTango.DevString, "job input xml"]],
        }


    #    Attribute definitions
    attr_list = {
        'jobSuccess':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'jobFailure':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'statisticsCollected':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'testData':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Polling period':100000,
            } ],
        'actorSelected':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


#------------------------------------------------------------------
#    WorkflowDSClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In WorkflowDSClass  constructor"

#==================================================================
#
#    WorkflowDS class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(WorkflowDSClass, WorkflowDS, 'WorkflowDS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed, e:
        print '-------> Received a DevFailed exception:', e
    except Exception, e:
        print '-------> An unforeseen exception occured....', e
